<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Description="Generates a single entity business class." Debug="True" %>
<%@ Property Name="Table" Type="TableSchema" Optional="False" DeepLoad="True" Category="Optional" Description="If true, the template will not output using and namespace statements." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="库名" Type="System.String" %>
/***********************************************
* 版权声明：2017-2020 
* 作    者：技术总监CTO => 吴文吉
* 功能描述：<%=Table.Description %> - 数据实体模型（可扩展）
* 创建时间：<%=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") %>
* 更新历史：日期 - 姓名 - 功能（日期倒序）
* GOTO：<%=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") %> == wuwenji == 创建 == <%=Table.Description %> - 数据实体模型
* *********************************************/

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace hh.model.<%=(库名) %>
{
    /// <summary>
    /// <%=Table.Name + " --- " + Table.Description %> - 据实体模型（可扩展）
    /// </summary>
    [Serializable]
    [Table("<%=Table.Name%>")]
    public partial class <%=GetTableName(Table.Name) %> // : IAggregateRoot
    {
        #region 私有变量
        <%foreach(var m in Table.Columns){%>        
        /// <summary>
        /// <%=m.Description %>
        /// </summary>
        private <%=GetType(m.NativeType, m.AllowDBNull) %> <%=GetPrivateName(m.Name)%><%=FiledDefaultValue(m) %>
        <%}%>
        #endregion
        
        #region 数据库model
        <%foreach(var m in Table.Columns){%>
        
        /// <summary>
        /// 获取或设置 <%=m.Description %>
        /// </summary>
        <%=m.IsPrimaryKeyMember&&m.ExtendedProperties["CS_IsIdentity"].Value.ToString()=="False"?"[DatabaseGenerated(DatabaseGeneratedOption.None)]":""%><%=m.IsPrimaryKeyMember?"[Key]":"" %><%="[Column(\""+m.Name+"\")]"%>
        public <%=GetType(m.NativeType, m.AllowDBNull) %> <%=GetName(m.Name)%>
        {
            set { <%=GetPrivateName(m.Name)%> = value; }
            get { return <%=GetPrivateName(m.Name)%>; }
        }
        <%}%>
        #endregion
    }
}

<script runat="template">

private string GetTableName(string v)
{
    string a = v.Remove(0, v.IndexOf("_") + 1).Replace("_", "");
    a = a.Substring(0, 1).ToUpper() + a.Substring(1);
    //if (a.EndsWith("Info")){ a = a.Substring(0,a.Length-4); }
    return a;
}
        
private string GetType(string type, bool dbnull)
{
    string flg="string";
    switch(type)
    {
        case "money":
        case "decimal":
            flg="decimal";
            break;
        case "date":
        case "datetime":
            flg="DateTime";
            break;
        case "bigint":
            flg="long";
            break;
        case "int":
            flg="int";
            break;
        case "smallint":
            flg="short";
            break;
        case "bit":
            flg="bool";
            break;
        case "float":
            flg="float";
            break;
        case "tinyint":
            flg="byte";
            break;
        case "time":
            flg="TimeSpan";
            break;
    }
    if (dbnull && flg != "string") { return flg+"?"; }
    return flg;
}

private string GetName(string v)
{
    string a = v;
    a = a.Substring(0, 1).ToUpper() + a.Substring(1);
    return a;
}

private string GetPrivateName(string v)
{
   return "_"+GetName(v).ToLower();
}

private string FiledDefaultValue(ColumnSchema cs)
{
    if(cs.IsPrimaryKeyMember) { return ";"; }
    
    string def=cs.ExtendedProperties["CS_Default"].Value.ToString().ToLower().Replace("(","").Replace(")","").Replace("'","");
    var dbType=GetType(cs.NativeType,cs.AllowDBNull);

    if(string.IsNullOrEmpty(def)) 
    {  
       string v="";
       if(cs.NativeType=="geography") return v="=\"POINT (0 0)\";";
       switch(dbType)
       {
            case "string":
               v=" = \"\";";
               break;
            case "DateTime":
               v=" = new DateTime(1900, 1, 1);";
               break;
            case "TimeSpan":
               v=" = new TimeSpan();";
               break;
            case "bool":
               v=" = false;";
               break;
            case "decimal":
               v=" = 0m;";
               break;
            default:
               v=" = 0;";
               break;
               
       }
       return v;
   }  
   else
   {
       string v="";
       switch(dbType)
       {
            case "string":
                v = "\"" + def + "\";";
                break;
            case "DateTime":
                if(def.IndexOf("getdate")>=0)
                {
                    v = "DateTime.Now;";
                }
                else
                {
                    v = "Convert.ToDateTime(\""+def+"\");";
                }
               break;
            case "TimeSpan":
                string[] vals = def.Split(':');
                v = string.Format("new TimeSpan({0},{1},{2});", vals[0], vals[1], vals[2]);
                break;
            case "bool":
                v = def=="0" ? "false;" : "true;";
                break;
            case "decimal":
                v = def + "M;";
                break;
            case "float":
                v = def + "f;";
                break;
            default:
                v = def + ";";
                break;
               
       }
       return  " = " + v;
   }
}

</script>