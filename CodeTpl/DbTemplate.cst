<%@ CodeTemplate Language="C#" TargetLanguage="Text" Debug="True" Description="Outputs all extended properties from a database." %>
<%@ Property Name="SampleStringProperty" Default="SomeValue" Type="System.String" %>
<%@ Property Name="SampleBooleanProperty" Default="True" Type="System.Boolean" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="Context" Description="Database to get the extended properties from." %>
<%@ Property Name="库名" Type="System.String"%>

<%@ Register Name="ModelTemplate" Template="ModelInfo.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="BLLTemplate" Template="ModelBLL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="DALTemplate" Template="ModelDAL.cst" MergeProperties="False" ExcludeProperties="" %>

<script runat="template">
    //解决方案输出路径
    private string Directory = String.Empty;
    [Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
    [Optional, NotChecked]
    [DefaultValue("")]
    public string OutputDirectory 
     { 
        get {return Directory; }
        set
        {
            if (value.EndsWith("\\")){ value = value.Substring(0, value.Length -1); }
            Directory = value;
        } 
     }
</script>

<script runat="template">
    //生成业务
    private void GenerateModelClasses()
    {
         string path = Directory;
        
         CodeTemplate modelinfo = new ModelTemplate();        
         modelinfo.SetProperty("库名", 库名);
         this.GenerateClassFile(modelinfo, path + "\\db.model\\" + 库名, "{0}");

         CodeTemplate service = new BLLTemplate(); 
         service.SetProperty("库名", 库名);
         this.GenerateClassFile(service, path + "\\com.service\\Base\\" + 库名, "{0}BLL");
        
        CodeTemplate storage = new DALTemplate(); 
         storage.SetProperty("库名", 库名);
         this.GenerateClassFile(storage, path + "\\com.storage\\Base\\" + 库名, "{0}DAL");
        
    }
</script>

<script runat="template">

    private string GetTableName(string v)
    {
        string a = v.Remove(0, v.IndexOf("_") + 1).Replace("_", "");
        a = a.Substring(0, 1).ToUpper() + a.Substring(1);
        //if (a.EndsWith("Info")){ a = a.Substring(0,a.Length-4); }
        return a;
    }
         
    private void GenerateClassFile(CodeTemplate template, string childFolder, string classNameFormat)
    {
        foreach(TableSchema table in this.SourceDatabase.Tables)
        {
            string className = string.Format(classNameFormat, this.GetTableName(table.Name));
            string FileDirectory = childFolder + "\\" + className + ".cs";
            //生成模板
            template.SetProperty("Table", table);
            template.SetProperty("ClassName", className);
            template.RenderToFile(FileDirectory, true);
            Debug.WriteLine(FileDirectory +" 创建成功.");         
        }     
    }
</script>

<%
   //创建实体层Entity类
   this.GenerateModelClasses();
   Debug.WriteLine("OK");
%>